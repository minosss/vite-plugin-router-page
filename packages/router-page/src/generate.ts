/* eslint-disable unicorn/consistent-function-scoping */
import type { Options, Page } from './types';
import { writeFile } from 'node:fs/promises';

const COMMENT = '/* eslint-disable */\n/* prettier-ignore */\n// @ts-nocheck\n// Generated by @yme/vite-plugin-router-page\n\n';

export async function writeDeclaration(
  pages: Page[],
  options: Options,
) {
  const names = pages.map((page) => page.name);
  const allDirs = [...new Set(pages.flatMap((page) => page.dirs))];
  const routes = pages.map((page) => page.route);

  const code = getDeclaration(allDirs, names, routes, options);

  const filePath = `${options.rootDir}/${options.dts}`;

  await writeFile(filePath, code, 'utf8');
}

function getDeclaration(names: string[], namesWithFile: string[], routes: string[], options: Options) {
  const { exportRoutePath, builtinRoute } = options;
  const { root, notFound } = builtinRoute;

  let code = `declare namespace RouterPage {\n  /** 根路由 */\n  type RootRouteKey = '${root}';\n\n  /** 未找到路由(捕获无效路径的路由) */\n  type NotFoundRouteKey = '${notFound}';\n\n  /** 页面路由 */\n  type RouteKey =`;

  for (const name of names) {
    code += `\n    | '${name}'`;
  }

  code += ';';

  code += `\n\n  /** 最后一级路由(该级路有对应的页面文件) */\n  type LastDegreeRouteKey = Extract<RouteKey, ${namesWithFile
        .map((item) => `'${item}'`)
        .join(' | ')}>`;

  if (exportRoutePath) {
    code += '\n\n  /** route of pages */\n  type RoutePaths =';

    for (const route of routes) {
      code += `\n    | '${route}'`;
    }
    code += ';';
  }

  code += '\n\n}\n';

  return COMMENT + code;
}

function getViewComponentsCode(pages: Page[], options: Options) {
  let importStatement = '// Define your global type AppRouter.Component';

  const checkIsNotLazy = (name: string) =>
    options.notLazyRoutes.includes(name);

  const isNumberKey = (name: string) => {
    const NUM_REG = /^\d+$/;
    return NUM_REG.test(name);
  };

  const hasShortLine = (name: string) => name.includes('-');

  const formatKey = (name: string) => `'${name}'`;

  const formatImportKey = (name: string) =>
    hasShortLine(name) ? name.replaceAll('-', '') : name;

  let code = `\nexport const ${
        options.exportName || 'pages'
    }: Record<RouterPage.LastDegreeRouteKey, AppRouter.Component> = {`;
  for (const { name: key, path: module } of pages) {
    const isNotLazy = checkIsNotLazy(key);
    const formatedKey = formatKey(key);

    if (isNotLazy) {
      const importKey = isNumberKey(key) ? `_view_${key}` : key;

      const formatedImportKey = formatImportKey(importKey);

      importStatement += `import ${formatedImportKey} from '${module}';\n`;

      code += formatedKey === key && !isNumberKey(key) ? `\n  ${key}` : `\n  ${formatedKey}: ${formatedImportKey}`;
    } else {
      code += `\n  ${formatedKey}: () => import('${module}')`;
    }
    // allways add comma
    code += ',';
  }
  code += '\n};\n\n';

  // routes
  if (options.exportRoutePath) {
    code += 'export const routes: Record<RouterPage.LastDegreeRouteKey, RouterPage.RoutePaths> = {';
    for (const { name: key, route } of pages) {
      code += `\n  '${key}': '${route}',`;
    }
    code += '\n};\n';
  }

  return COMMENT + importStatement + code;
}

export async function writeViewComponents(namesWithModules: Page[], options: Options) {
  const code = getViewComponentsCode(namesWithModules, options);

  const filePath = `${options.rootDir}/${options.dir}/index.ts`;

  await writeFile(filePath, code, 'utf8');
}
