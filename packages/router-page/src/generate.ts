/* eslint-disable unicorn/consistent-function-scoping */
import type { Options, NameWithModule } from './types';
import { writeFile } from 'node:fs/promises';

const COMMENT = '/* eslint-disable */\n/* prettier-ignore */\n// @ts-nocheck\n// Generated by @yme/vite-plugin-router-page\n';

export async function writeDeclaration(
  names: string[],
  namesWithFile: string[],
  options: Options,
) {
  const code = getDeclaration(names, namesWithFile, options);

  const filePath = `${options.rootDir}/${options.dts}`;

  await writeFile(filePath, code, 'utf8');
}

function getDeclaration(names: string[], namesWithFile: string[], options: Options) {
  const { root, notFound } = options.builtinRoute;

  let code = `declare namespace RouterPage {\n  /** 根路由 */\n  type RootRouteKey = '${root}';\n\n  /** 未找到路由(捕获无效路径的路由) */\n  type NotFoundRouteKey = '${notFound}';\n\n  /** 页面路由 */\n  type RouteKey =`;

  for (const name of names) {
    code += `\n    | '${name}'`;
  }

  code += ';';

  code += `\n\n  /** 最后一级路由(该级路有对应的页面文件) */\n  type LastDegreeRouteKey = Extract<RouteKey, ${namesWithFile
        .map((item) => `'${item}'`)
        .join(' | ')}>`;

  code += '\n}\n';

  return COMMENT + code;
}

function getViewComponentsCode(namesWithModules: NameWithModule[], options: Options) {
  let importStatement = '// Define your global type AppRouter.Component';

  const checkIsNotLazy = (name: string) =>
    options.notLazyRoutes.includes(name);

  const isNumberKey = (name: string) => {
    const NUM_REG = /^\d+$/;
    return NUM_REG.test(name);
  };

  const hasShortLine = (name: string) => name.includes('-');

  const formatKey = (name: string) => (hasShortLine(name) ? `'${name}'` : name);

  const formatImportKey = (name: string) =>
    hasShortLine(name) ? name.replaceAll('-', '') : name;

  let code = `\nexport const ${
        options.exportName || 'pages'
    }: Record<RouterPage.LastDegreeRouteKey, AppRouter.Component> = {`;
  for (const [index, { key, module }] of namesWithModules.entries()) {
    const isNotLazy = checkIsNotLazy(key);

    if (isNotLazy) {
      const formatedKey = formatKey(key);

      const importKey = isNumberKey(key) ? `_view_${key}` : key;

      const formatedImportKey = formatImportKey(importKey);

      importStatement += `import ${formatedImportKey} from '${module}';\n`;

      code += formatedKey === key && !isNumberKey(key) ? `\n  ${key}` : `\n  ${formatedKey}: ${formatedImportKey}`;
    } else {
      code += `\n  ${formatKey(key)}: () => import('${module}')`;
    }

    if (index < namesWithModules.length - 1) {
      code += ',';
    }
  }
  code += '\n};\n';

  return COMMENT + importStatement + code;
}

export async function writeViewComponents(namesWithModules: NameWithModule[], options: Options) {
  const code = getViewComponentsCode(namesWithModules, options);

  const filePath = `${options.rootDir}/${options.dir}/index.ts`;

  await writeFile(filePath, code, 'utf8');
}
